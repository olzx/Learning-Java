1:
    Многопоточное программирование может снизить время выполнения высоконагруженной программы,
    путем разделения её на два потока, что позволит программе выполняться параллельно.
    (Это и остановка потока, паузка, обмен данными между потокаму, синхронизация методов)

2:
    Для поддержки многопоточного программирования в Java предусмотрены
    класс Thread и интерфейс Runnable.

3:
    При создании выполняемого объекта следует отдать предпочтение
    расширению класса Thread в том случае, когда необходимо
    получить непосредственный доступ к экземпляру потока (взаимодействие с ним),
    организовать доступ и управление потоком.
     При реализации интерфейса Runnable доступен лишь один метод - run().

4:
    MyThrdAwait.java

5:
    Для установки приоритету на +3 выше нормального, необходимо:
            Thread thr = new Thread(new MyThread("Поток №1"));

            thr.start();

            thr.setPriority(Thread.NORM_PRIORITY + 3);
            System.out.println("Приоритет потока " + thr.getName() + ": " + thr.getPriority());

6:
    Если у метода указано ключевое слово synchronized,
    то его одновременное выполнение несколькими потоками - невозможно.
    Т.е. этот метод одновременно сможет выполнять только 1 поток, а второй
    поток, будет ожидать пока первый завершит выполнение метода.

7:
    Метода wait() и notify() предназначены для обеспечения взаимодействия между потоками.
    Потоки отправляют уведомления между собой, о том, что он временно приостанавливает свое выполнение над методом,
    (переходит в состояние ожидания) и в этот момент метод может использовать другой поток.

8:
    TickTockMain.java

9:
    В новых программах на Java не следует применять методы:
    suspend(), resume(), stop(), т.к. это может привести к взаимоблокировке потоков,
    что в конечном итоге приведет к некорректной работе программы.

10:
    С помощью метода getName() из класса Thread можно получить имя потока.

11:
    Метод isAlive() возвращает true или false, false - если поток не завершен.
