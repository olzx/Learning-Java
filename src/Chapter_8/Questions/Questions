1:
    package Chapter_8.Questions.qpack

2:
    Пространство имен - некоторое абстрактное окружение,
     созданное для логической группировки уникальных имен т.е. классов.
    Важно разделения на отдельные области пространства имен, т.к. это дает возможность разделять
     группы классов на отдельные области (пакеты), в результате чего исключается конфликт
     между двумя классами с одинаковыми именами.

3:
    Содержимое пакетов храниться в каталоге (папке).

4:
    Отличие доступа protected от доступа по умолчанию:
     protected члены доступны из подкласса в клюбом пакете,
     но вот члены доступные по умолчанию - нет.

5:
    Если необходимо использовать классы из другого пакета:
    1. Можно импортировать необходимые классы в текущий пакет.
     import package1.TestClass;
    Или если нужно импортировать все классы из пакета:
     import package1.*;
    2. Можно указать конкретный путь до класса, перед созданием объекта:
     package1.TestClass obj = new package1.TestClass();

6:
    "Один интерфейс - множество методов" - лучше всего это демонстрирует
    языковое средство создания интерфейсов: объявляемое с помощью ключевого слова interface

7:
    Сколько угодно классов могут реализовать один и тот же интерфейс. (один интерфейс - множество методов)
    Класс может реализовывать сколько угодно интерфейсов, достаточно указывать их через запятую.

8:
    Да, один интерфейс может наследовать другой.

9:
    Интерфейс для класса Vehicle из главы 7:
    IVehicle.java

10:
    Переменные, объявленные в интерфейсе, неявно имеющие static и final, дают преимущество:
     можно создавать константы, к которым можно обращаться без необходимости создавать экземпляр класса.
     Т.е. просто через точечную нотацию.

11:
    Да, пакет по сути является контейнером для классов.

12:
    Пакет java.lang автоматически импортируется в любую программу на Java.

13:
    Ключевое слово default, используется для объявления в интерфейсе метода по умолчанию.

14:
    Да, начиная с JDK 8 допускается определение статического метода интерфейса.

15:
    Для определения метода в интерфейсе не нарушая работоспособность существующего кода
     (когда интерфейс уже давно используется, но вот решили добавить новый метод в интерфейс, так что бы
     не поломать уже рабочие программы):
     указывается ключевое слово default перед объявлением метода - т.е. метод определяется по умолчанию.

16:
    Статический метод интерфейса вызывается через точечную нотацию, без создания объекта, и класса.

17:
    Да, интерфейс может включать в себя закрытый (private) метод.
    Это используется для того, если например два метода в интерфейсе используют один и тот же код,
     тогда есть смысл определить повторяющийся код в private метод.