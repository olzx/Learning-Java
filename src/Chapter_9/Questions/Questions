1:
    На вершине иерархии исключений находится класс Exception.

2:
    Как используются ключевые слова try и catch:
    В try происходит возникновение ошибки.
    В catch идет обработка этой ошибки (вывод сообщения, остановка выполнения и др.)

3:
    Ошибка: что бы catch сработал, фрагмент кода с обращением в массив нужно обернуть в блок try {}

4:
    Если исключение не будет перехвачено, его перехватит JVM и прекратит работу всей программы.

5:
    Ошибка: try и catch должны находится внутри метода.

6:
    Да, внутренний блок catch может повторно сгенерировать исключение,
    которое будет обработано во внешнем блоке catch.

7:
    Нет, блок finally это не последний фрагмент кода, выполняемый перед завершением программы.
    Блок finally выполняется всегда после выполнения блока try.

8:
    Проверяемые исключения необходимо явно объявлять
    с помощью инструкции throws, включаемой в объявление метода.

9:
    Ошибка: класс не определяется как производнй от класса Exception,
    необходимо указать: extends Exception.


10:
    StackDemo.java

11:
    Три причины по которым погут генерироваться исключения:
    1. Исключения типа Error - возникающие в JVM.
    2. Исключения типа Exception - возникают при работе программы (деление на 0, выход за пределы массива и т.д)
    3. RuntimeException - подкласс класса Exception, ошибки во время выполнения программы.

12:
    Два подкласса, производных непосредственно от класса Throwable:
    1.  Exception
    2.  Error

13:
    Групповой перехват исключений - когда в одной конструкции catch
    указывается несколько исключений через оператор | (или), т.е.
    одна конструкция сможет перехватить одно из нескольких (указанных) исключений.

14:
    Нет, исключения типа Error перехватывать невозможно, т.к. они возникают в JVM,
    а не в прикладной программе.