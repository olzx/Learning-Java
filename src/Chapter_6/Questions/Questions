1:
    ob.count = 10 - не допустимый код, т.к. переменная в этом классе имеет private
     модификатор доступа, поэтому нельзя обратиться к этой переменной и поменять значение.

2:
    Модификатор доступа должен предшествовать объявлению члена класса.

3:
    StackDemo.java

4:
    SwapMethod.java

5:
    class X {
        int meth(int a, int b) { ... }
        String meth(int a, int b) { ... }
    }
    Фрагмент кода написан не правильно, т.к. в данном случае перегрузка метода не получится,
     из-за того, что аргументы имеют одинаковый тип данных, для перегрузки недостаточно поменять только
     тип возвращаемого значения. Поэтому компилятор выдаст ошибку.

6:
    ReverseString.java

7:
    Переменная, которая является общей для всех объектов класса, объявляется с помощью ключевого слова static.

8:
    Статический блок может понадобиться, для подготовки перед созданием объекта.
     Т.е. может возникнуть потребность задать значения некоторых статических переменных перед тем,
     как воспользоваться статическими методами класса. Или же установить соединение с удаленным сетевым узлом.
    Статический блок выполняется до того как срабатывает конструктор класса.

9:
    Внутренний класс это тот, который объявляется в другом классе.
    Внутренний класс не может существовать отдельно от класса в который он вложен.
    Область действия вложенного класса ограничена его внешним классом.
    Так же вложенный класс можно объявить в пределах блока (например в методе main).

10:
    В случае когда необходимо создать член класса, и предоставить к нему доступ ТОЛЬКО другим членам этого же класса,
     необходимо задать модификатор доступа как private.

11:
    Имя метода и список его параметров вместе составляют СИГНАТУРУ метода.

12:
    Если методу передается значение типа int, то в этом случае используется передача параметра по ЗНАЧЕНИЮ.

13:
    SumMethod.java

14:
    Да, методы с переменным числом аргументов можно перегружать.

15:
    Неоднозначность возникающая при вызове перегруженного метода с переменным числом аргументов:

    void test(int ...v) {...}
    void test(int i, int ...v) {...}

    test(10);