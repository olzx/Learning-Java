1:
    Байтовые потоки - предоставляют удобные средства для управления вводом и выводом байтов.
    Символьные потоки - ориентированы на обмен символьными данными. (Кодировка Unicode)
    В некоторых случаях символьные потоки более эффективны по сравнению с байтовыми потоками.

2:
    Консольные операции ввода-вывода осуществляются в текстовом виде, для этого в Java используются
    байтовые потоки, но не символьные т.к. первоначально байтовые потоки были единственным средством,
    позволяющим выполнять консольный ввод, и во многих существующих программах на Java для этой цели
    по-прежнему используются исключительно байтовые потоки.

3:
    Как открыть файл для чтения байтов:
        Для этого создаем объект класса FileInputStream:
        FileInputStream fin = new FileInputStream("имя_файла");
        Далее используя метод read() считываем...

4:
    Как открыть файл для чтения символов:
        Для файлового ввода-вывода символов используются классы FileReader
        и FileWriter.
        Т.е. для чтения:

5:
    Как открыть файл для выполнения операций ввода-вывода
    с произвольным доступом:
        Для этой цели предусмотрен класс RandomAccessFile(String имя_файла, String доступ).
        Параметр доступа принимает следующие значения:
            "r" - данные читаются из файла, но не записываются в него;
            "rw" - файл открывается как для чтения, так и для записи;
            "rws" и "rwd" (для локальных устройств) - которые определяют
            немедленное сохранение файла на физическом устройстве.

6:
    Для преобразования строки "123.23" в её двичный эквивалент:
        Такое преобразование осуществляется с помощью так
        называемых оболочек типов (объектных оболочек) Java.
        Это классы, которые икапсулируют простые типы:
        double d = Double.parseDouble("123.23");

7:
    CopyFileSpaceReplace.java

8:
    CopyFileSpaceReplace2.java