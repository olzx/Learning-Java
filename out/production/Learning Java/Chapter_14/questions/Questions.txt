1.
    Лямбда-оператор ( -> )  - (оператор стрелка) разделяет лямбда-выражение на две части:
        Левая часть - параметры (если они необходимы)
        Правая - тело лямбда-выражения, которое описывает действие.

2.
    Функциональный интерфейс - определяет только один абстрактный метод.
    (абстрактный лишь в том случае, если он не определяет какой-либо реализации)
        Пример функционального интерфейса:
        interface MyValue
        {
            double getValue();
        }

3.
    Связь между функциональными интерфейсами и лямбда выражениями заключается в том,
    что лямбда-выражения не выполняются сами по себе, они формируют реализацию абстрактного метода,
    определяемого функциональным интерфейсом, который задает свой целевой тип.

4.
    Два общих типа лямбда-выражений: строчные и блочные лямбда-выражения.

5.
    Лямбда-выражение которое возвращает значение true, если
    число находится в диапазоне от 10 до 20:
        (n) -> (n >= 10) && (n <= 20);

6.
    Range.java

7.
    Factorial.java

8.
    GenericFactorial.java

9.
    SpacesDel.java

10.
    В лямбда-выражении можно использовать локальную переменную,
    но она не должна изменять свое значение в ходе выполнения программы,
    или её модификатор должен быть final.

11.
    Да, если лямбда-выражение может генерировать исключение,
    то абстрактный метод функционального интерфейса должен
    содержать инструкцию throws, в которой указано это исключение.

12.
    Ссылка на метод - позволяет ссылаться лямбда-выражениям на метод без его выполнения.

13.
    При вычислении ссылки на метод создается экземпляр функционального интерфейса,
    предоставляемого целевым контекстом.

14.
    Ссылка на метод в таком случае будет имет следующий вид:
        MyClass::myStaticMethod;

15.
    В данном случае ссылку на метод myInstMethod(),
    ассоциированный с объектом mcObj можно создать сл. образом:
        mcObj::myInstMethod;

16:
    MethodRefDemo2.java