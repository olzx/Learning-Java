1.
    Самотипизированными называют константы перечислимого типа из-за
    того, что консанты относятся к конкретному указанному типу перечисления,
    указанного после ключевого слова enum.

2.
    Класс Enum автоматически наследуют перечисления.

3.
    ShowEnum.java

4.
    TrafficLightDemo.java

5.
    Упаковка - это процесс изолирования (инкапсуляции) значения в оболочке типа:
        Integer iOb = new Integer(10); - упаковка числа 10 в объект типа Integer

    Распаковка - это процесс извлечения значения из объекта оболочки:
        int i = iOb.intValue(); - распаковка значения из объекта iOb и присваивание результата переменной типа int

    Автоупаковка и автораспаковка выполняется автоматически без явного создания объекта:
        Автоупаковка - выполняется без ключевого слова new:
            Integer iOb = 10;
        Автораспаковка - выполняется без использования методов intValue() или doubleValue():
            int i = iOb; - достаточно указать переменную без вызовов каких-либо методов

6.
    Double val = Double.valueOf(123.0);

    Применение автоупаковки:
    Double val = 123.0;

7.
    Статический импорт - позволяет ссылаться на статические члены по их простым именам,
    без дополнительного указания имен классов, что упрощает синтаксис:

    Без статического импорта:
        Math.sqrt(25);

    С статическим импортом:
        import static java.lang.Math.sqrt;

        sqrt(25); - не нужно указывать имя класса Math

8.
    Инструкция:
        import static java.lang.Integer.parseInt;
    Выполняет статический импорт члена parseInt класса Integer.
    Теперь для использования метода parseInt() не нужно перед ним указывать класс Integer

9.
    Статический импорт не нужно использовать для импорта всех статических членов классов,
    его нужно использовать в конкретных ситуациях, например использовать для нескольких статических членов,
    часто используемых в большой программе.

10.
    Синтаксис аннотации основывается на интерфейсах.

11.
    Маркерной называется аннотация без параметров - такая анотация помечает объявление некоторым атрибутом.
    При объявлении круглые скобки не указываются.
    Пример: @Deprecated, @Override и др.

12.
    Аннотации применимы не только к методам, но и к классам, параметрам, констанам, и к самим аннотациям.